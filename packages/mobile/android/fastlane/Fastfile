# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :distribution do
    latest_release = firebase_app_distribution_get_latest_release(
      app: ENV["APP_ID_DISTRIBUTION"]
    )
    increment_version_code({ version_code: latest_release[:buildVersion].to_i + 1 })
    sentry_upload_dif(
      auth_token: ENV["SENTRY_TOKEN"],
      org_slug: 'oraichain',
      project_slug: 'owallet-mobile',
      include_sources: true, # Optional. For source context.
    )
    gradle(task: 'assemble', build_type: 'Release')
    firebase_app_distribution(
      app: ENV["APP_ID_DISTRIBUTION"],
      groups: "internal-test",
      release_notes: "Test on fastlane"
    )
    # discord_notifier(
    #   webhook_url: "https://discord.com/api/webhooks/#{ENV["DISCORD_HOOK_ID"]}/#{ENV["DISCORD_HOOK_TOKEN"]}",
    #   title: "ANDROID DISTRIBUTION FASTLANE - #{android_get_version_name} (#{latest_release[:buildVersion].to_i + 1})",
    #   description: "
    #   Congratulations. You have successfully deployed OWallet app to Distribution :thumbsup::skin-tone-4: :thumbsup::skin-tone-4: :thumbsup::skin-tone-4:",
    #   success: true
    # )
  end

  desc "Runs all the tests"
  lane :test do
    version_code_store = google_play_track_version_codes(
      package_name: "com.io.owallet",
      track: 'internal',
      json_key_data: ENV["JSON_KEY_DATA"]
    )[0]
    version_code_local = android_get_version_code(gradle_file: "app/build.gradle")
    version_name_store = google_play_track_release_names(
      package_name: "com.io.owallet",
      track: 'internal',
      json_key_data: ENV["JSON_KEY_DATA"])[0]
    version_name_local = android_get_version_name(
      gradle_file: "app/build.gradle" # optional
    ).gsub("'", "")
    if Gem::Version.new(version_name_local) < Gem::Version.new(version_name_store)
      android_set_version_code(
        version_code: version_code_store+1, # optional, if not specified, Version Code will be incremented
        gradle_file: "app/build.gradle" # optional
      )
      android_set_version_name(
        version_name: "'#{version_name_store}'",
        gradle_file: "app/build.gradle" # optional
      )
    elsif Gem::Version.new(version_name_local) == Gem::Version.new(version_name_store) && version_code_local.to_i <= version_code_store
      android_set_version_code(gradle_file: "app/build.gradle", version_code: version_code_store + 1)
    elsif Gem::Version.new(version_name_local) > Gem::Version.new(version_name_store)
      android_set_version_name(
        version_name: "'#{version_name_local}'", # Set a specific version number
        gradle_file: "app/build.gradle" # optional
      )
      android_set_version_code(gradle_file: "app/build.gradle", version_code: version_code_local)
    end
    version_code_local = android_get_version_code(gradle_file: "app/build.gradle")
    version_name_local = android_get_version_name(
      gradle_file: "app/build.gradle" # optional
    ).gsub("'", "")
    # discord_notifier(
    #   webhook_url: "https://discord.com/api/webhooks/1111240493888720898/P5NGMukdguh3nuXf9Cqrs7YKoYz_fjUnhQlvdi1MFjnOKXf2FmMN5ms5L5_5a67KR5I_",
    #   title: "ANDROID FASTLANE - #{version_name_local} (#{version_code_local})",
    #   description: 'test',
    #   success: true
    # )
  end

  desc "Submit a new Beta Build"
  lane :release do
    version_code_store = google_play_track_version_codes(
      package_name: "com.io.owallet",
      track: 'internal',
      json_key_data: ENV["JSON_KEY_DATA"]
    )[0]
    version_code_local = android_get_version_code(gradle_file: "app/build.gradle")
    version_name_store = google_play_track_release_names(
      package_name: "com.io.owallet",
      track: 'internal',
      json_key_data: ENV["JSON_KEY_DATA"])[0]
    version_name_local = android_get_version_name(
      gradle_file: "app/build.gradle" # optional
    ).gsub("'", "")
    if Gem::Version.new(version_name_local) < Gem::Version.new(version_name_store)
      android_set_version_code(
        version_code: version_code_store+1, # optional, if not specified, Version Code will be incremented
        gradle_file: "app/build.gradle" # optional
      )
      android_set_version_name(
        version_name: "'#{version_name_store}'",
        gradle_file: "app/build.gradle" # optional
      )
    elsif Gem::Version.new(version_name_local) == Gem::Version.new(version_name_store) && version_code_local.to_i <= version_code_store
      android_set_version_code(gradle_file: "app/build.gradle", version_code: version_code_store + 1)
    elsif Gem::Version.new(version_name_local) > Gem::Version.new(version_name_store)
      android_set_version_name(
        version_name: "'#{version_name_local}'", # Set a specific version number
        gradle_file: "app/build.gradle" # optional
      )
      android_set_version_code(gradle_file: "app/build.gradle", version_code: version_code_local)
    end
    version_code_local = android_get_version_code(gradle_file: "app/build.gradle")
    version_name_local = android_get_version_name(
      gradle_file: "app/build.gradle" # optional
    ).gsub("'", "")
    sentry_upload_dif(
      auth_token: ENV["SENTRY_TOKEN"],
      org_slug: 'oraichain',
      project_slug: 'owallet-mobile',
      include_sources: true, # Optional. For source context.
    )
    gradle(task: 'clean bundle', build_type: 'Release',properties: {
      "android.injected.signing.store.file" => Dir.pwd + ENV["FILE_PATH"],
      "android.injected.signing.store.password" => ENV["PASS_KEY_STORE"],
      "android.injected.signing.key.alias" => ENV["ALIAS"],
      "android.injected.signing.key.password" => ENV["PASS_ALIAS_KEY_STORE"],
    })
    upload_to_play_store(track: 'internal',skip_upload_apk:true, json_key_data: ENV["JSON_KEY_DATA"],package_name:"com.io.owallet",skip_upload_metadata:true,skip_upload_images:true,skip_upload_screenshots:true)
    # discord_notifier(
    #   webhook_url: "https://discord.com/api/webhooks/#{ENV["DISCORD_HOOK_ID"]}/#{ENV["DISCORD_HOOK_TOKEN"]}",
    #   title: "ANDROID BETA FASTLANE - #{version_name_local} (#{version_code_local})",
    #   description: "
    #   Congratulations. You have successfully deployed OWallet app to Google Play :thumbsup::skin-tone-4: :thumbsup::skin-tone-4: :thumbsup::skin-tone-4:",
    #   success: true
    # )
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
